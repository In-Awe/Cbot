
// A setup identified by the 'Leviathan Apex' strategy.
export interface TradeSetup {
    pair: string;
    direction: 'BUY' | 'SELL';
    entryPrice: number;
    stopLoss: number;
    convictionScore: number;
    timestamp: Date;
}

// A trade, either active or closed. Simplified for the new bot.
export interface Trade {
    id: string;
    pair: string;
    direction: 'LONG' | 'SHORT';
    entryPrice: number;
    openedAt: Date;
    status: 'active' | 'closed';
    sizeUnits: number;
    stopLoss: number;
    exitPrice?: number;
    closedAt?: Date;
    pnl?: number;
    reason?: string;
}

// Log entry from the bot's analysis process.
export interface AnalysisLogEntry {
    id: string;
    timestamp: Date;
    pair: string;
    price: number;
    action: 'setup_found' | 'filter_volatility' | 'hold';
    note: string;
}

export type SimulationStatus = 'stopped' | 'live' | 'paused' | 'csv_simulating' | 'csv_complete';

export interface TerminalLogEntry {
    id: number;
    timestamp: Date;
    type: 'info' | 'request' | 'response' | 'error' | 'warn';
    message: string;
    data?: string; // Optional stringified JSON data
}

export interface PriceHistoryLogEntry {
    id: number; // Timestamp
    timestamp: Date;
    pair: string;
    open: number;
    high: number;
    low: number;
    close: number;
    volume: number;
    interval: '1m' | '15s' | '1s' | '5m' | '60m';
}

// Configuration for a trading strategy.
export interface StrategyConfig {
    // For Gemini-based strategy
    exchange: string;
    trading_pairs: string[];
    trade_amount_usd: number;
    max_concurrent_trades: number;
    take_profit_pct: number;
    stop_loss_pct: number;
    entry_window_s: number;
    exit_timeout_s: number;
    timeframes: string[];
    short_ma: number;
    long_ma: number;
    rsi_period: number;
    // For "Leviathan" strategy as used in ControlPanel
    bband_period: number;
    bband_std_dev: number;
    trailing_stop_percent: number;
}

// A trading signal generated by the AI.
export interface SignalMeta {
    timeframe: string;
    signal: 'bull' | 'bear' | 'neutral' | 'error';
    confidence: number;
    error?: string | null;
}

export interface Signal {
    pair: string;
    action: 'buy' | 'sell' | 'hold';
    confidence: number;
    score: number;
    last_price?: number | null;
    take_profit?: number | null;
    stop_loss?: number | null;
    meta: SignalMeta[];
    note?: string | null;
    suggested_take_profit_pct?: number | null;
    suggested_stop_loss_pct?: number | null;
}

// A record for tracking prediction accuracy.
export interface PredictionAccuracyRecord {
    status: 'resolved' | 'pending';
    timeframe: string;
    predictedSignal: string;
    success: boolean;
}

// Represents the bot's conviction scores for different time horizons.
export interface HeatScores {
    '1s'?: {
        buy: number;
        sell: number;
    };
    '15m'?: {
        buy: number;
        sell: number;
    };
    '30m'?: {
        buy: number;
        sell: number;
    };
}
